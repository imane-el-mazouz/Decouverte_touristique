pipeline {
    agent any

    environment {
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        IMAGE_NAME = 'tourist-app'
        DOCKER_HUB_REPO = 'imane1233333333333333/discover'
        DOCKER_CREDENTIAL_ID = 'docker-credentials-id'
        SONAR_TOKEN = credentials('SonarQubeToken')
        SONAR = 'SONAR'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/imane-el-mazouz/Decouverte_touristique.git'
            }
        }

        stage('Build and Test') {
            steps {
                dir('Plateform_BackEnd') {
                    bat 'mvn clean install'
                    bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('Plateform_BackEnd') {
                    withSonarQubeEnv(SONAR) {
                        bat "mvn sonar:sonar -Dsonar.token=${SONAR_TOKEN}"
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    dir('Plateform_BackEnd') {
                        bat "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }
         stage('Verify Docker Installation') {
                    steps {
                        script {
                            bat 'docker --version'
                        }
                    }
                }

        stage('Tag and Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", DOCKER_CREDENTIAL_ID) {
                        def imageName = "${DOCKER_HUB_REPO}/${IMAGE_NAME}"
                        bat """
                            docker tag ${IMAGE_NAME}:latest ${imageName}
                            docker push ${imageName}
                        """
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    dir('Plateform_BackEnd') {
                        bat "docker-compose -f ${DOCKER_COMPOSE_FILE} up -d"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
